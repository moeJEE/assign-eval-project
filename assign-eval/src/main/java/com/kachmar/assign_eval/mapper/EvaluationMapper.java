package com.kachmar.assign_eval.mapper;

import com.kachmar.assign_eval.dao.entity.Evaluation;
import com.kachmar.assign_eval.dao.entity.Project;
import com.kachmar.assign_eval.dao.entity.User;
import com.kachmar.assign_eval.dto.evaluation.EvaluationRequest;
import com.kachmar.assign_eval.dto.evaluation.EvaluationResponse;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Named;

@Mapper(componentModel = "spring")
public interface EvaluationMapper {

    /**
     * Maps EvaluationRequest DTO to Evaluation entity.
     *
     * @param request The EvaluationRequest DTO.
     * @return The Evaluation entity.
     */
    @Mapping(target = "id", ignore = true) // ID is generated by the database
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "modifiedAt", ignore = true)
    @Mapping(target = "project", source = "projectId", qualifiedByName = "mapProjectFromId")
    @Mapping(target = "developer", source = "developerId", qualifiedByName = "mapUserFromId")
    @Mapping(target = "projectManager", ignore = true) // Handled at the service level
    Evaluation toEntity(EvaluationRequest request);

    /**
     * Maps Evaluation entity to EvaluationResponse DTO.
     *
     * @param evaluation The Evaluation entity.
     * @return The EvaluationResponse DTO.
     */
    @Mapping(target = "evaluationId", source = "id")
    @Mapping(target = "projectId", source = "project.id")
    @Mapping(target = "developerId", source = "developer.id")
    @Mapping(target = "developerName", source = "developer", qualifiedByName = "mapUserToFullName")
    @Mapping(target = "projectManagerId", source = "project.projectManager.id")
    @Mapping(target = "projectManagerName", source = "project.projectManager", qualifiedByName = "mapUserToFullName")
    @Mapping(target = "rating", source = "rating") // 'rating' instead of 'score'
    @Mapping(target = "feedback", source = "feedback")
    @Mapping(target = "createdAt", source = "createdAt", dateFormat = "yyyy-MM-dd'T'HH:mm:ss")
    EvaluationResponse toResponse(Evaluation evaluation);

    /**
     * Helper method to map a Project ID to a Project entity.
     *
     * @param projectId The Project ID.
     * @return A Project entity with only the ID set.
     */
    @Named("mapProjectFromId")
    default Project mapProjectFromId(Long projectId) {
        if (projectId == null) {
            return null;
        }
        Project project = new Project();
        project.setId(projectId);
        return project;
    }

    /**
     * Helper method to map a User ID to a User entity.
     *
     * @param userId The User ID.
     * @return A User entity with only the ID set.
     */
    @Named("mapUserFromId")
    default User mapUserFromId(Long userId) {
        if (userId == null) {
            return null;
        }
        User user = new User();
        user.setId(userId);
        return user;
    }

    /**
     * Helper method to map a User entity to its full name.
     *
     * @param user The User entity.
     * @return The full name of the user.
     */
    @Named("mapUserToFullName")
    default String mapUserToFullName(User user) {
        if (user == null) {
            return "Unknown User";
        }
        return user.getFirstname() + " " + user.getLastname();
    }
}
