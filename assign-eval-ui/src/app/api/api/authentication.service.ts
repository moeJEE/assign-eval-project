/**
 * OpenApi Specification - Kachmar
 *
 * Contact: contact@kachmar.ma
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable, tap }                                        from 'rxjs';

// @ts-ignore
import { AuthenticationRequest } from '../model/authenticationRequest';
// @ts-ignore
import { AuthenticationResponse } from '../model/authenticationResponse';
// @ts-ignore
import { RegistrationRequest } from '../model/registrationRequest';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
    providedIn: 'root'
  })
  export class AuthenticationService {
  
      protected basePath = 'http://localhost:8088/api/v1';  // Backend API URL
      public defaultHeaders = new HttpHeaders();
      public configuration = new Configuration();
      public encoder: HttpParameterCodec;
  
      constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string | string[], @Optional() configuration: Configuration) {
          if (configuration) {
              this.configuration = configuration;
          }
          if (typeof this.configuration.basePath !== 'string') {
              const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
              if (firstBasePath != undefined) {
                  basePath = firstBasePath;
              }
  
              if (typeof basePath !== 'string') {
                  basePath = this.basePath;
              }
              this.configuration.basePath = basePath;
          }
          this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
      }
  
      // Method to handle user login
      public authenticate(authenticationRequest: AuthenticationRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
          if (authenticationRequest === null || authenticationRequest === undefined) {
              throw new Error('Required parameter authenticationRequest was null or undefined when calling authenticate.');
          }
  
          let localVarHeaders = this.defaultHeaders;
  
          // Check for existing authorization token
          let localVarCredential: string | undefined;
          localVarCredential = this.configuration.lookupCredential('bearerAuth');
          if (localVarCredential) {
              localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
          }
  
          let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
          if (localVarHttpHeaderAcceptSelected === undefined) {
              const httpHeaderAccepts: string[] = ['application/json'];
              localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
          }
  
          if (localVarHttpHeaderAcceptSelected !== undefined) {
              localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
          }
  
          let localVarPath = `/auth/authenticate`;
          return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`, {
              context: options?.context,
              body: authenticationRequest,
              responseType: 'json',
              withCredentials: this.configuration.withCredentials,
              headers: localVarHeaders,
              observe: observe,
              reportProgress: reportProgress
          }).pipe(
              // After getting the response, store token and role in localStorage
              tap((response: any) => {
                  if (response.token && response.role) {
                      localStorage.setItem('authToken', response.token);
                      localStorage.setItem('userRole', response.role);  // Save user role
                  }
              })
          );
      }
  
  }
  